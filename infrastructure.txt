# AmarVote Infrastructure Documentation
# Comprehensive guide to integration, building, testing, and deployment

===============================================================================
                              OVERVIEW
===============================================================================

AmarVote is a next-generation secure voting platform built with a microservices
architecture using containerized services. The system integrates multiple 
technologies for end-to-end verifiable voting with blockchain audit trails,
AI-powered assistance, and post-quantum cryptography.

CORE ARCHITECTURE:
- Frontend: React 19.1.0 with Vite build system
- Backend: Spring Boot 3.5.0 with Java 21
- ElectionGuard Service: Python 3.12 with cryptographic operations
- Blockchain Service: Node.js 18 with Truffle and Ganache
- RAG Service: Python 3.12 with LangChain for AI assistance
- Database: PostgreSQL 16 (Neon Cloud or local)
- Containerization: Docker & Docker Compose

===============================================================================
                          SYSTEM REQUIREMENTS
===============================================================================

DEVELOPMENT ENVIRONMENT:
- Docker Engine 20.10+
- Docker Compose 2.0+
- Git
- 8GB+ RAM recommended
- Modern web browser
- Administrative/root privileges

PRODUCTION ENVIRONMENT:
- Docker Engine 20.10+
- Docker Compose 2.0+
- SSL Certificates (Let's Encrypt)
- Minimum 16GB RAM
- Multi-core CPU
- SSD storage recommended
- Network connectivity for external services

===============================================================================
                          PROJECT STRUCTURE
===============================================================================

AmarVote/
├── .github/workflows/         # CI/CD pipeline configuration
│   ├── ci.yml                # Continuous integration
│   └── docker-deploy.yml     # Azure deployment workflow
├── backend/                  # Spring Boot application
│   ├── Dockerfile           # Production build
│   ├── Dockerfile.dev       # Development build
│   ├── pom.xml             # Maven configuration
│   └── src/                # Java source code
├── frontend/               # React application
│   ├── Dockerfile          # Production build (Nginx)
│   ├── Dockerfile.dev      # Development build (Vite)
│   ├── package.json        # NPM configuration
│   └── src/               # React source code
├── Microservice/          # ElectionGuard service
│   ├── Dockerfile         # Python service container
│   ├── requirements.txt   # Python dependencies
│   ├── tests/            # Test suites
│   └── api.py           # Flask application
├── blockchain/           # Blockchain components
│   ├── Dockerfile       # Node.js container
│   ├── scripts/         # Deployment scripts
│   ├── contracts/       # Solidity contracts
│   └── migrations/      # Truffle migrations
├── blockchain-microservice/ # Voting API
│   ├── Dockerfile      # Flask API container
│   └── requirements.txt # Python dependencies
├── rag-service/        # AI assistance service
│   ├── Dockerfile     # Python service container
│   ├── requirements.txt # Python dependencies
│   └── app.py        # Flask application
├── docker-compose.yml      # Development orchestration
├── docker-compose.prod.yml # Production orchestration
├── .env                   # Environment configuration
└── test_api.py           # Integration test script

===============================================================================
                        ENVIRONMENT CONFIGURATION
===============================================================================

DEVELOPMENT CONFIGURATION (.env):
# Database credentials (Neon Cloud)
NEON_HOST=ep-silent-sun-a8cdgygz-pooler.eastus2.azure.neon.tech
NEON_PORT=5432
NEON_DATABASE=AmarVoteDB
NEON_USERNAME=neondb_owner
NEON_PASSWORD=npg_if6SULlmOe5C
SSL_MODE=require

# Local database (fallback)
DB_HOST=postgres
DB_PORT=5432
DB_DATABASE=amarvotedb
DB_USERNAME=postgres
DB_PASSWORD=123

# API endpoints
VITE_API_URL=http://192.168.0.108:8080
VOTING_API_URL=http://amarvote2025.me:5002

# Security keys
MASTER_KEY_PQ='xPFjU6M4enqAcYVDxAtYXkGAiURTdMI+3mK2RUkrJps='

# Cloud storage
CLOUDINARY_NAME=amarvote_cloud
CLOUDINARY_KEY=174228237379778
CLOUDINARY_SECRET=Y3oXHbTHO_vHwcvNJ8PpE-umP-k

PRODUCTION ADDITIONAL VARIABLES:
- SPRING_PROFILES_ACTIVE=production
- FLASK_ENV=production
- NODE_ENV=production
- SSL certificate paths
- Database connection pooling settings
- Redis configuration (optional)

===============================================================================
                          DEPENDENCY MANAGEMENT
===============================================================================

BACKEND (Maven - pom.xml):
- Spring Boot 3.5.0 with Java 21
- Spring Security, JPA, Validation
- PostgreSQL driver
- JWT authentication (jjwt 0.12.6)
- Spring Actuator for health checks
- Spring Mail for notifications
- Lombok for code generation

FRONTEND (NPM - package.json):
- React 19.1.0 with React DOM
- Vite 4.4.1 for build tooling
- React Router 7.6.1 for routing
- Axios 1.9.0 for HTTP requests
- Testing: Vitest, Testing Library
- UI: React Icons, Recharts, Circular Progress
- PDF: jsPDF, html2canvas
- Bot Detection: FingerprintJS
- Linting: ESLint with React plugins

PYTHON SERVICES:
ElectionGuard (requirements.txt):
- Flask, FastAPI for web services
- Cryptography libraries (gmpy2, pqcrypto)
- ElectionGuard cryptographic operations
- MongoDB integration (pymongo)
- Testing: pytest, coverage, black
- Production: Gunicorn WSGI server

RAG Service (requirements.txt):
- Flask 3.0.0 with CORS
- LangChain 0.1.20 for AI operations
- ChromaDB 0.5.0 for vector storage
- Sentence Transformers 3.0.1
- PDF processing (pypdf 4.3.1)
- OpenAI API integration
- FAISS for similarity search

Blockchain Service (package.json):
- Truffle framework for smart contracts
- Web3.js for blockchain interaction
- Ganache for local blockchain
- Solidity compiler

===============================================================================
                         CONTAINER ARCHITECTURE
===============================================================================

DEVELOPMENT CONTAINERS (docker-compose.yml):

1. BACKEND SERVICE:
   - Image: Custom (backend/Dockerfile.dev)
   - Base: maven:3.9-eclipse-temurin-21
   - Port: 8080:8080
   - Features: Hot reload with Spring DevTools
   - Networks: election_net
   - Dependencies: Database connections

2. FRONTEND SERVICE:
   - Image: Custom (frontend/Dockerfile.dev)
   - Base: node:18-alpine
   - Port: 5173:5173
   - Features: Vite dev server with HMR
   - SSL: Self-signed certificates for HTTPS
   - Networks: election_net

3. ELECTIONGUARD SERVICE:
   - Image: Custom (Microservice/Dockerfile)
   - Base: python:3.12
   - Port: 5000:5000
   - Features: Cryptographic operations
   - Health checks: /health endpoint
   - Workers: 4 Gunicorn workers

4. RAG SERVICE:
   - Image: Custom (rag-service/Dockerfile)
   - Base: python:3.12-slim
   - Port: 5001:5001
   - Features: AI document processing
   - Volumes: Vector store persistence
   - Memory: Optimized for ML operations

5. BLOCKCHAIN SERVICES:
   - Ganache: trufflesuite/ganache:latest
     * Port: 8545:8545
     * Purpose: Local Ethereum blockchain
   - Blockchain Deployer: Custom container
     * Runs smart contract deployment
     * Depends on Ganache availability
   - Voting API: Custom Python Flask
     * Port: 5002:5002
     * Blockchain interaction service

PRODUCTION CONTAINERS (docker-compose.prod.yml):

1. BACKEND:
   - Multi-stage build for optimization
   - Production JVM settings
   - External database connections
   - Health monitoring enabled

2. FRONTEND:
   - Nginx reverse proxy
   - SSL termination
   - Static asset serving
   - Gzip compression enabled

3. SERVICES:
   - Production-grade logging
   - Resource limits configured
   - Auto-restart policies
   - External volumes for persistence

===============================================================================
                           NETWORK CONFIGURATION
===============================================================================

DEVELOPMENT NETWORKS:
- election_net: Bridge network (172.20.0.0/16)
  * Backend: Dynamic IP
  * Frontend: Dynamic IP  
  * ElectionGuard: 172.20.0.10
  * RAG Service: 172.20.0.50
  
- voting-network: Bridge network
  * Ganache blockchain: Dynamic IP
  * Voting services: Dynamic IP

PRODUCTION NETWORKS:
- amarvote_election_net: External network
  * Static IP assignments
  * Frontend: 172.20.0.40
  * ElectionGuard: 172.20.0.10
  * RAG Service: 172.20.0.50
  * Load balancer integration

PORT MAPPINGS:
- 80/443: Frontend (Production)
- 5173: Frontend (Development)
- 8080: Backend API
- 5000: ElectionGuard Service
- 5001: RAG Service
- 5002: Blockchain API
- 8545: Ganache Blockchain

===============================================================================
                          BUILD PROCESS
===============================================================================

DEVELOPMENT BUILD:
1. Environment Setup:
   ```bash
   git clone https://github.com/TAR2003/AmarVote.git
   cd AmarVote
   cp .env.example .env  # Configure environment variables
   ```

2. Container Build:
   ```bash
   # Build all services
   docker-compose build
   
   # Build specific service
   docker-compose build backend
   docker-compose build frontend
   ```

3. Service Startup:
   ```bash
   # Start all services
   docker-compose up -d
   
   # Start with logs
   docker-compose up
   
   # Start specific services
   docker-compose up backend frontend
   ```

4. Development with Hot Reload:
   ```bash
   # Quick development startup
   ./start-dev.sh
   
   # Manual startup with hot reload
   docker-compose -f docker-compose.yml up -d
   ```

PRODUCTION BUILD:
1. Pre-build Steps:
   ```bash
   # Clean previous builds
   docker-compose down --rmi all
   docker system prune -f
   
   # Update environment for production
   export NODE_ENV=production
   export SPRING_PROFILES_ACTIVE=production
   ```

2. Multi-stage Production Build:
   ```bash
   # Build production images
   docker-compose -f docker-compose.prod.yml build
   
   # Deploy production stack
   docker-compose -f docker-compose.prod.yml up -d
   ```

3. SSL Configuration:
   ```bash
   # Let's Encrypt certificates
   certbot --nginx -d yourdomain.com
   
   # Copy certificates to container
   cp /etc/letsencrypt:/etc/letsencrypt:ro
   ```

BUILD OPTIMIZATION:
- Multi-stage Dockerfiles for size reduction
- Layer caching for faster builds
- .dockerignore files to exclude unnecessary files
- Dependency caching (Maven, NPM, pip)
- Build-time argument passing for environments

===============================================================================
                           TESTING FRAMEWORK
===============================================================================

TESTING ARCHITECTURE:
The system implements comprehensive testing at multiple levels:

UNIT TESTING:
1. Backend (Maven/JUnit):
   ```bash
   cd backend
   ./mvnw test                    # Run all unit tests
   ./mvnw test -Dtest=UserTest   # Run specific test
   ./mvnw clean test             # Clean and test
   ```

2. Frontend (Vitest):
   ```bash
   cd frontend
   npm run test                  # Run unit tests
   npm run test:coverage        # Generate coverage report
   npm run test:ui             # Interactive test UI
   npm run test:watch          # Watch mode
   ```

3. Python Services (pytest):
   ```bash
   cd Microservice
   python -m pytest tests/              # Run all tests
   python -m pytest tests/ -v          # Verbose output
   python -m pytest tests/ --cov=.     # Coverage report
   
   # RAG Service testing
   cd rag-service
   python test_rag.py
   python test_amarvote_rag.py
   ```

4. Smart Contracts (Truffle):
   ```bash
   cd blockchain
   truffle test                 # Run contract tests
   truffle test --network development
   ```

INTEGRATION TESTING:
1. API Integration:
   ```bash
   # Test blockchain API
   python test_api.py
   
   # Test full system integration
   python integration_tests.py
   ```

2. Service Integration:
   ```bash
   # Multi-service integration testing
   docker-compose -f docker-compose.test.yml up --abort-on-container-exit
   ```

3. End-to-End Testing:
   ```bash
   # Full election cycle test
   python e2e_tests/full_election_cycle.py
   ```

PERFORMANCE TESTING:
1. Load Testing:
   ```bash
   # Load test voting process
   ./scripts/load_test.sh 1000  # 1000 concurrent votes
   
   # Stress test blockchain
   ./scripts/blockchain_stress_test.sh
   ```

2. Security Testing:
   ```bash
   # Automated security scanning
   ./scripts/security_scan.sh
   
   # Penetration testing
   ./scripts/pentest.sh
   ```

TEST CONFIGURATION:
- pytest.ini: Python test configuration
- vitest.config.js: Frontend test configuration
- JUnit configuration in pom.xml
- Test coverage thresholds: 30% minimum
- Automated test reporting in CI/CD

CONTINUOUS TESTING:
Tests are integrated into the CI/CD pipeline:
- Pre-commit hooks for code quality
- Automated testing on pull requests
- Coverage reporting to Codecov
- Integration with GitHub Actions

===============================================================================
                      CONTINUOUS INTEGRATION/DEPLOYMENT
===============================================================================

CI/CD PIPELINE (.github/workflows/):

CI WORKFLOW (ci.yml):
Triggers:
- Push to main branch
- Pull requests
- Changes in: docker-compose.yml, backend/, frontend/, Database/, Microservice/

Jobs:
1. BACKEND JOB:
   - Runner: ubuntu-latest
   - Java: OpenJDK 21
   - Cache: Maven dependencies
   - Steps:
     * Checkout code
     * Setup JDK 21
     * Cache Maven packages
     * Build with Maven (skip tests for speed)
     * Run unit tests
     * Generate test reports

2. FRONTEND JOB:
   - Runner: ubuntu-latest
   - Node.js: Latest LTS
   - Cache: node_modules
   - Steps:
     * Checkout code
     * Setup Node.js
     * Cache node modules
     * Install dependencies (npm ci || npm install)
     * Run linting (optional)
     * Run frontend tests (vitest)
     * Generate coverage report
     * Build frontend (npm run build)
     * Upload test results
     * Upload coverage to Codecov

3. PYTHON COMPONENTS JOB:
   - Runner: ubuntu-latest
   - Python: 3.12
   - Working Directory: ./Microservice
   - Steps:
     * Checkout code
     * Setup Python
     * Install dependencies
     * Run pytest with coverage
     * Upload Python test results

DEPLOYMENT WORKFLOW (docker-deploy.yml):
Triggers:
- Push to deployment branch
- Successful completion of CI workflow

Target: Azure VM deployment

Steps:
1. PREPARATION:
   - Checkout code with full history
   - Validate critical files existence
   - Setup Docker Buildx
   - Configure SSH access to Azure VM

2. DEPLOYMENT:
   - SSH connection to Azure VM
   - Prepare VM directory structure
   - Sync files via rsync
   - Setup Docker context for remote deployment
   - Deploy using docker-compose.prod.yml
   - Verify deployment health

3. VERIFICATION:
   - Health check endpoints
   - Service connectivity tests
   - Log validation
   - Cleanup deployment artifacts

DEPLOYMENT TARGETS:

1. DEVELOPMENT:
   - Automatic deployment on main branch
   - Development environment
   - Hot reload enabled
   - Debug logging

2. STAGING:
   - Manual trigger or tagged releases
   - Production-like environment
   - Full test suite execution
   - Performance monitoring

3. PRODUCTION:
   - Manual approval required
   - Blue-green deployment strategy
   - Health checks and rollback capability
   - Monitoring and alerting

===============================================================================
                         DEPLOYMENT STRATEGIES
===============================================================================

LOCAL DEVELOPMENT DEPLOYMENT:
1. Quick Start:
   ```bash
   # Clone and setup
   git clone https://github.com/TAR2003/AmarVote.git
   cd AmarVote
   
   # Configure environment
   cp .env.example .env
   # Edit .env with your settings
   
   # Start development environment
   ./start-dev.sh
   # OR
   docker-compose up -d
   ```

2. Service URLs:
   - Frontend: http://localhost:5173
   - Backend: http://localhost:8080
   - ElectionGuard: http://localhost:5000
   - RAG Service: http://localhost:5001
   - Blockchain: http://localhost:5002

3. Development Tools:
   ```bash
   # View logs
   docker-compose logs -f
   
   # Service-specific logs
   docker logs amarvote_backend
   docker logs amarvote_frontend
   
   # Access container shells
   docker-compose exec backend bash
   docker-compose exec frontend sh
   ```

SINGLE-SERVER PRODUCTION DEPLOYMENT:
1. Server Preparation:
   ```bash
   # Install Docker and Docker Compose
   curl -fsSL https://get.docker.com -o get-docker.sh
   sudo sh get-docker.sh
   sudo apt install docker-compose
   
   # Configure firewall
   sudo ufw allow 80,443,22/tcp
   
   # Setup SSL certificates
   sudo apt install certbot nginx
   sudo certbot --nginx -d yourdomain.com
   ```

2. Application Deployment:
   ```bash
   # Deploy production stack
   git clone https://github.com/TAR2003/AmarVote.git
   cd AmarVote
   
   # Configure production environment
   cp .env.example .env
   # Update .env with production values
   
   # Deploy
   docker-compose -f docker-compose.prod.yml up -d
   ```

3. Production Monitoring:
   ```bash
   # Health checks
   curl http://localhost:8080/actuator/health
   curl http://localhost:5000/health
   curl http://localhost:5002/health
   
   # System monitoring
   docker-compose -f docker-compose.prod.yml logs -f
   docker stats
   ```

CLOUD DEPLOYMENT (KUBERNETES):
```yaml
# kubernetes deployment example
apiVersion: apps/v1
kind: Deployment
metadata:
  name: amarvote-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: amarvote-backend
  template:
    metadata:
      labels:
        app: amarvote-backend
    spec:
      containers:
      - name: backend
        image: amarvote/backend:latest
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
```

HIGH AVAILABILITY DEPLOYMENT:
```bash
# Docker Swarm setup
docker swarm init

# Deploy high-availability stack
docker stack deploy -c docker-stack.yml amarvote

# Scaling services
docker service scale amarvote_backend=3
docker service scale amarvote_frontend=2
```

AZURE VM DEPLOYMENT (Automated):
The system includes automated Azure deployment via GitHub Actions:
- SSH-based deployment to Azure VM
- Automated file synchronization
- Docker context management
- Health verification
- Rollback capabilities

===============================================================================
                        MONITORING AND HEALTH CHECKS
===============================================================================

HEALTH CHECK ENDPOINTS:
1. Backend Health:
   - URL: http://localhost:8080/actuator/health
   - Response: JSON with service status
   - Includes: Database connectivity, memory usage

2. ElectionGuard Health:
   - URL: http://localhost:5000/health
   - Response: Service availability status
   - Includes: Cryptographic service status

3. RAG Service Health:
   - URL: http://localhost:5001/health
   - Response: AI service status
   - Includes: Vector store connectivity

4. Blockchain Health:
   - URL: http://localhost:5002/health
   - Response: Blockchain connectivity
   - Includes: Smart contract status

DOCKER HEALTH CHECKS:
Containers include built-in health monitoring:
```dockerfile
# Example health check
HEALTHCHECK --interval=30s --timeout=3s \
    CMD curl -f http://localhost:5000/health || exit 1
```

MONITORING TOOLS:
1. Container Monitoring:
   ```bash
   # Real-time container stats
   docker stats
   
   # Service status
   docker-compose ps
   
   # System resource usage
   docker system df
   ```

2. Log Aggregation:
   ```bash
   # Centralized logging
   docker-compose logs -f
   
   # Service-specific logs
   docker-compose logs backend
   docker-compose logs --tail=100 frontend
   ```

3. Performance Monitoring:
   - Spring Boot Actuator metrics
   - Custom application metrics
   - Database performance monitoring
   - Network latency tracking

===============================================================================
                          SECURITY CONFIGURATION
===============================================================================

SECURITY LAYERS:

1. NETWORK SECURITY:
   - Isolated Docker networks
   - Firewall configuration (ufw)
   - SSL/TLS encryption (Let's Encrypt)
   - Reverse proxy (Nginx)

2. APPLICATION SECURITY:
   - JWT authentication
   - Spring Security configuration
   - Input validation and sanitization
   - SQL injection prevention

3. CRYPTOGRAPHIC SECURITY:
   - ElectionGuard end-to-end verification
   - Post-quantum cryptography (pqcrypto)
   - Blockchain immutable audit trail
   - Zero-knowledge proofs

4. CONTAINER SECURITY:
   - Non-root user execution
   - Minimal base images
   - Security scanning (automated)
   - Secrets management

SECURITY TESTING:
```bash
# Automated security scanning
./scripts/security_scan.sh

# Dependency vulnerability scanning
./scripts/dependency_check.sh

# Penetration testing
./scripts/pentest.sh

# SSL/TLS configuration testing
./scripts/ssl_test.sh
```

SECURITY BEST PRACTICES:
- Regular security audits (quarterly)
- Automated vulnerability scanning
- Principle of least privilege
- Data encryption at rest and in transit
- Incident response procedures
- Compliance with election security standards

===============================================================================
                         TROUBLESHOOTING GUIDE
===============================================================================

COMMON ISSUES AND SOLUTIONS:

1. CONTAINER BUILD FAILURES:
   ```bash
   # Clean rebuild
   docker-compose down --rmi all
   docker system prune -f
   docker-compose build --no-cache
   ```

2. PORT CONFLICTS:
   ```bash
   # Check conflicting services
   netstat -tulpn | grep -E ':(80|8080|5173)\s'
   
   # Stop conflicting services
   sudo systemctl stop apache2
   sudo systemctl stop nginx
   ```

3. DATABASE CONNECTION ISSUES:
   ```bash
   # Test database connectivity
   docker-compose exec backend bash
   pg_isready -h $DB_HOST -p $DB_PORT
   
   # Check environment variables
   docker-compose exec backend env | grep DB_
   ```

4. MEMORY ISSUES:
   ```bash
   # Check container memory usage
   docker stats
   
   # Increase Docker memory limits
   # Edit docker-compose.yml:
   # deploy:
   #   resources:
   #     limits:
   #       memory: 2G
   ```

5. NETWORK CONNECTIVITY:
   ```bash
   # Test network connectivity
   docker network ls
   docker network inspect amarvote_election_net
   
   # Reset networks
   docker-compose down
   docker network prune
   docker-compose up -d
   ```

DEBUG MODE:
```bash
# Start with debug logging
DOCKER_COMPOSE_DEBUG=1 docker-compose up

# Access container for debugging
docker-compose exec backend bash
docker-compose exec frontend sh

# View detailed logs
docker-compose logs --details backend
```

PERFORMANCE TROUBLESHOOTING:
```bash
# Monitor resource usage
htop
iotop
nethogs

# Database performance
docker-compose exec postgres psql -U postgres -c "SELECT * FROM pg_stat_activity;"

# Application profiling
curl http://localhost:8080/actuator/metrics
```

===============================================================================
                           BACKUP AND RECOVERY
===============================================================================

DATA BACKUP:

1. DATABASE BACKUP:
   ```bash
   # PostgreSQL backup
   docker-compose exec postgres pg_dump -U postgres amarvotedb > backup.sql
   
   # Automated daily backups
   docker-compose exec postgres pg_dump -U postgres amarvotedb | gzip > backup_$(date +%Y%m%d).sql.gz
   ```

2. VOLUME BACKUP:
   ```bash
   # Backup Docker volumes
   docker run --rm -v amarvote_postgres_data:/source -v $(pwd):/backup alpine tar czf /backup/postgres_backup.tar.gz -C /source .
   
   # RAG vector store backup
   docker run --rm -v amarvote_rag_vectorstore:/source -v $(pwd):/backup alpine tar czf /backup/rag_backup.tar.gz -C /source .
   ```

3. CONFIGURATION BACKUP:
   ```bash
   # Backup environment configuration
   tar czf config_backup.tar.gz .env docker-compose*.yml
   
   # Backup blockchain artifacts
   tar czf blockchain_backup.tar.gz blockchain/build/
   ```

DISASTER RECOVERY:

1. FULL SYSTEM RECOVERY:
   ```bash
   # Stop all services
   docker-compose down -v
   
   # Restore volumes
   docker run --rm -v amarvote_postgres_data:/target -v $(pwd):/backup alpine tar xzf /backup/postgres_backup.tar.gz -C /target
   
   # Restart services
   docker-compose up -d
   ```

2. DATABASE RECOVERY:
   ```bash
   # Restore database from backup
   docker-compose exec postgres psql -U postgres -c "DROP DATABASE IF EXISTS amarvotedb;"
   docker-compose exec postgres psql -U postgres -c "CREATE DATABASE amarvotedb;"
   cat backup.sql | docker-compose exec -T postgres psql -U postgres amarvotedb
   ```

BACKUP AUTOMATION:
```bash
#!/bin/bash
# automated_backup.sh
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups/amarvote"

# Create backup directory
mkdir -p $BACKUP_DIR

# Database backup
docker-compose exec postgres pg_dump -U postgres amarvotedb | gzip > $BACKUP_DIR/db_$DATE.sql.gz

# Volume backups
docker run --rm -v amarvote_postgres_data:/source -v $BACKUP_DIR:/backup alpine tar czf /backup/postgres_vol_$DATE.tar.gz -C /source .

# Configuration backup
tar czf $BACKUP_DIR/config_$DATE.tar.gz .env docker-compose*.yml

# Cleanup old backups (keep 30 days)
find $BACKUP_DIR -name "*.gz" -mtime +30 -delete

echo "Backup completed: $DATE"
```

===============================================================================
                         PERFORMANCE OPTIMIZATION
===============================================================================

CONTAINER OPTIMIZATION:

1. RESOURCE LIMITS:
   ```yaml
   # docker-compose.prod.yml
   services:
     backend:
       deploy:
         resources:
           limits:
             cpus: '2.0'
             memory: 2G
           reservations:
             cpus: '1.0'
             memory: 1G
   ```

2. CACHING STRATEGIES:
   - Maven dependency caching
   - NPM package caching
   - Docker layer caching
   - Database query caching
   - Redis for session storage

3. BUILD OPTIMIZATION:
   - Multi-stage Dockerfiles
   - .dockerignore files
   - Parallel builds
   - Layer optimization

APPLICATION OPTIMIZATION:

1. BACKEND OPTIMIZATION:
   ```properties
   # application-prod.properties
   spring.jpa.hibernate.ddl-auto=none
   spring.jpa.show-sql=false
   spring.datasource.hikari.maximum-pool-size=20
   spring.datasource.hikari.minimum-idle=5
   logging.level.org.hibernate=WARN
   ```

2. FRONTEND OPTIMIZATION:
   - Code splitting
   - Tree shaking
   - Asset optimization
   - Bundle size analysis
   - CDN integration

3. DATABASE OPTIMIZATION:
   - Connection pooling
   - Query optimization
   - Index management
   - Vacuum scheduling

LOAD TESTING RESULTS:
- Concurrent Users: 1000+
- Response Time: <200ms (95th percentile)
- Throughput: 500 requests/second
- Memory Usage: <2GB per service
- CPU Usage: <80% under load

===============================================================================
                              CONCLUSION
===============================================================================

This infrastructure documentation provides comprehensive guidance for:

✅ DEVELOPMENT SETUP: Complete local development environment
✅ BUILD PROCESS: Automated building for all components  
✅ TESTING FRAMEWORK: Unit, integration, and E2E testing
✅ CI/CD PIPELINE: Automated deployment with GitHub Actions
✅ PRODUCTION DEPLOYMENT: Multiple deployment strategies
✅ MONITORING: Health checks and performance monitoring
✅ SECURITY: Multi-layer security implementation
✅ TROUBLESHOOTING: Common issues and solutions
✅ BACKUP/RECOVERY: Data protection and disaster recovery
✅ OPTIMIZATION: Performance tuning guidelines

The AmarVote platform is designed for:
- High availability and scalability
- Security-first architecture
- Developer-friendly workflows
- Production-ready deployment
- Comprehensive monitoring and maintenance

For additional support:
- GitHub Issues: https://github.com/TAR2003/AmarVote/issues
- Documentation: ./docs/ directory
- CI/CD Logs: GitHub Actions tab
- Health Monitoring: Built-in endpoints

Last Updated: $(date +%Y-%m-%d)
Infrastructure Version: 1.0.0
